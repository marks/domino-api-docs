#%RAML 0.8
title: Domino API
version: 1.0
documentation:
- title: Domino API
  content: 'TODO: Add a description'
baseUri: https://api.dominodatalab.com/
schemas:
- Your awesome model request: |
    {
      "id": "Your awesome model request",
      "title": "Your awesome model request",
      "type": "object",
      "properties": {
        "parameters": {
          "description": "For example, if your API endpoint is powered by the following function:\n \n\n```python\n    def random_number(start = 10, stop = 100):\n        return random.uniform(start, stop)\n```\n \n\nYou would pass two number objects in to `parameters`. The full JSON body would be like:\n \n\n```\n    {\"parameters\": [20, 200] }\n```",
          "type": "object"
        }
      },
      "required": [
        "parameters"
      ]
    }
- Your awesome model response: |
    {
      "id": "Your awesome model response",
      "title": "Your awesome model response",
      "type": "object",
      "properties": {
        "release": {
          "id": "Release",
          "title": "Release",
          "type": "object",
          "properties": {
            "commitId": {
              "description": "the commit your API endpoint is bound to",
              "type": "string"
            },
            "file": {
              "description": "the file your API endpoint is bound to",
              "type": "string"
            },
            "function": {
              "description": "the function your API endpoint is bound to",
              "type": "string"
            },
            "version": {
              "description": "the version of your API that was used",
              "type": "number"
            }
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "id": "Result",
          "title": "Result",
          "type": "object",
          "properties": {
            "a_random_number": {
              "type": "number"
            }
          }
        }
      }
    }
- List of Runs response: |
    {
      "id": "List of Runs response",
      "title": "List of Runs response",
      "type": "object",
      "properties": {
        "objectType": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "data": {
          "description": "Array of run statuses",
          "type": "object"
        }
      }
    }
- Start Run request: |
    {
      "id": "Start Run request",
      "title": "Start Run request",
      "type": "object",
      "properties": {
        "command": {
          "description": "Array of strings making up your command. For example: `[\"model.py\",\"dataset\",\"--sample\",\"2000\"]`",
          "type": "object"
        },
        "isDirect": {
          "description": "a direct command is interpretted as a shell command; Domino doesn't try to infer a program to match your file type",
          "type": "boolean"
        },
        "title": {
          "description": "an optional title for your run",
          "type": "string"
        },
        "tier": {
          "description": "name of the hardware tier to use",
          "type": "string"
        },
        "commitId": {
          "description": "revision at which to start the run",
          "type": "string"
        },
        "publishApiEndpoint": {
          "description": "If true, the results of a successful run will be deployed to the project's active API Endpoint, if one exists",
          "type": "boolean"
        }
      },
      "required": [
        "command",
        "isDirect"
      ]
    }
- Start Run response: |
    {
      "id": "Start Run response",
      "title": "Start Run response",
      "type": "object",
      "properties": {
        "runId": {
          "description": "The unique ID for the run that was just started",
          "type": "string"
        },
        "message": {
          "description": "A human-readable message with a full link to view the status of your run",
          "type": "string"
        }
      }
    }
- Run Status response: |
    {
      "id": "Run Status response",
      "title": "Run Status response",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID for the run",
          "type": "string"
        },
        "projectId": {
          "description": "the ID of the project",
          "type": "string"
        },
        "number": {
          "description": "the auto-increment number associated with the run",
          "type": "number"
        },
        "startingUserId": {
          "description": "the ID of the user who started the run",
          "type": "string"
        },
        "queued": {
          "description": "milliseconds epoch time the run was added to the queue",
          "type": "number"
        },
        "started": {
          "description": "milliseconds epoch time the run started executing",
          "type": "number"
        },
        "completed": {
          "description": "milliseconds epoch time the run completed running",
          "type": "number"
        },
        "status": {
          "description": "the status of the run",
          "type": "string"
        },
        "commitId": {
          "description": "the commit hash of the project used to create the run",
          "type": "string"
        },
        "executor": {
          "type": "string"
        },
        "outputCommitId": {
          "description": "the commit hash of the project post-run (look at files with this hash for the results)",
          "type": "string"
        },
        "title": {
          "description": "title of the run, if it was renamed",
          "type": "string"
        },
        "isArchived": {
          "description": "boolean denoting if the run was archived (hidden from the web interface)",
          "type": "boolean"
        },
        "postProcessedTimestamp": {
          "description": "milliseconds epoch time the run finished processing (this happens after the run has completed and includes saving the results back to the main project repo)",
          "type": "number"
        },
        "diagnoisticStatistics": {
          "id": "DiagnoisticStatistics",
          "title": "DiagnoisticStatistics",
          "type": "object",
          "properties": {
            "isError": {
              "type": "boolean"
            },
            "data": {
              "type": "object"
            }
          }
        },
        "isCompleted": {
          "type": "boolean"
        }
      }
    }
/v1:
  /{username}/{project_name}/endpoint:
    uriParameters:
      username:
        description: The project owner's username
        type: string
        required: true
        displayName: username
      project_name:
        description: The project name
        type: string
        required: true
        displayName: project_name
    post:
      body:
        application/json:
          schema: Your awesome model request
      displayName: Your awesome model
      description: 
      responses:
        200:
          description: Success
          body:
            application/json:
              schema: Your awesome model response
  /search:
    get:
      displayName: Search
      description: Execute a search
      responses:
        200:
          description: Success
      queryParameters:
        query:
          description: The phrase to search
          type: string
          required: true
          displayName: query
        area:
          description: The type of object to search. Valid values are `project`, `run`, `file`, and `comment`
          type: string
          required: true
          displayName: area
  /v1/projects/{username}/{project_name}:
    /runs{?}:
      uriParameters:
        username:
          description: The project owner's username
          type: string
          required: true
          displayName: username
        project_name:
          description: The project name
          type: string
          required: true
          displayName: project_name
      get:
        displayName: List of Runs
        description: Get a list of runs
        responses:
          200:
            description: Success
            body:
              application/json:
                schema: List of Runs response
    /runs:
      uriParameters:
        username:
          description: The project owner's username
          type: string
          required: true
          displayName: username
        project_name:
          description: The project name
          type: string
          required: true
          displayName: project_name
      /{run_id}:
        uriParameters:
          username:
            description: The project owner's username
            type: string
            required: true
            displayName: username
          project_name:
            description: The project name
            type: string
            required: true
            displayName: project_name
          run_id:
            description: The unique ID for the run
            type: string
            required: true
            displayName: run_id
        get:
          displayName: Run Status
          description: Get the status of a run
          responses:
            200:
              description: Success
              body:
                application/json:
                  schema: Run Status response
      post:
        body:
          application/json:
            schema: Start Run request
        displayName: Start Run
        description: Start a run of a given script or command
        responses:
          200:
            description: Success
            body:
              application/json:
                schema: Start Run response
    /files/{commit_id}/{path}:
      uriParameters:
        username:
          description: The project owner's username
          type: string
          required: true
          displayName: username
        project_name:
          description: The project name
          type: string
          required: true
          displayName: project_name
        commit_id:
          type: string
          required: false
          displayName: commit_id
        path:
          type: string
          required: false
          displayName: path
      get:
        displayName: List files
        description: Get a list of files in a commit
        responses:
          200:
            description: Success
    /blobs/{blob_id}:
      uriParameters:
        username:
          description: The project owner's username
          type: string
          required: true
          displayName: username
        project_name:
          description: The project name
          type: string
          required: true
          displayName: project_name
        blob_id:
          description: The unique ID of the blob
          type: string
          required: true
          displayName: blob_id
      get:
        displayName: Get a file
        description: Get the contents of a file from the project
        responses:
          200:
            description: Success
