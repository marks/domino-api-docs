swagger: 2.0
info:
  version: 
  title: Domino API
  description: 'TODO: Add a description'
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: api.dominodatalab.com
basePath: /
securityDefinitions: {}
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /v1/{username}/{project_name}/endpoint:
    post:
      description: 
      tags:
      - API Endpoints
      operationId: Create_Your awesome model_
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project owner's username
      - name: project_name
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project name
      - name: body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/Yourawesomemodelrequest'
      responses:
        200:
          description: 
          schema:
            $ref: '#/definitions/Yourawesomemodelresponse'
  /v1/projects/{username}/{project_name}/runs{?}:
    get:
      description: Get a list of runs
      tags:
      - Project Runs and Files
      operationId: List of Runs_
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project owner's username
      - name: project_name
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project name
      responses:
        200:
          description: 
          schema:
            $ref: '#/definitions/ListofRunsresponse'
  /v1/projects/{username}/{project_name}/runs:
    post:
      description: Start a run of a given script or command
      tags:
      - Project Runs and Files
      operationId: Create_Start Run_
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project owner's username
      - name: project_name
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project name
      - name: body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/StartRunrequest'
      responses:
        200:
          description: 
          schema:
            $ref: '#/definitions/StartRunresponse'
  /v1/projects/{username}/{project_name}/runs/{run_id}:
    get:
      description: Get the status of a run
      tags:
      - Project Runs and Files
      operationId: Get_Run Status_
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project owner's username
      - name: project_name
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project name
      - name: run_id
        in: path
        required: true
        x-is-map: false
        type: string
        description: The unique ID for the run
      responses:
        200:
          description: 
          schema:
            $ref: '#/definitions/RunStatusresponse'
  /v1/projects/{username}/{project_name}/files/{commit_id}/{path}:
    get:
      description: Get a list of files in a commit
      tags:
      - Project Runs and Files
      operationId: List files_
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project owner's username
      - name: project_name
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project name
      - name: commit_id
        in: path
        required: false
        x-is-map: false
        type: string
      - name: path
        in: path
        required: false
        x-is-map: false
        type: string
      responses:
        200:
          description: 
          schema:
            type: object
  /v1/projects/{username}/{project_name}/blobs/{blob_id}:
    get:
      description: Get the contents of a file from the project
      tags:
      - Project Runs and Files
      operationId: Get a file_
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project owner's username
      - name: project_name
        in: path
        required: true
        x-is-map: false
        type: string
        description: The project name
      - name: blob_id
        in: path
        required: true
        x-is-map: false
        type: string
        description: The unique ID of the blob
      responses:
        200:
          description: 
          schema:
            type: object
  /v1/search:
    get:
      description: Execute a search
      tags:
      - Search
      operationId: Search_
      produces:
      - application/json
      parameters:
      - name: query
        in: query
        required: true
        x-is-map: false
        type: string
        description: The phrase to search
      - name: area
        in: query
        required: true
        x-is-map: false
        type: string
        description: The type of object to search. Valid values are `project`, `run`, `file`, and `comment`
      responses:
        200:
          description: 
          schema:
            type: object
definitions:
  Yourawesomemodelrequest:
    title: Your awesome model request
    type: object
    properties:
      parameters:
        description: "For example, if your API endpoint is powered by the following function:\n \n\n```python\n    def random_number(start = 10, stop = 100):\n        return random.uniform(start, stop)\n```\n \n\nYou would pass two number objects in to `parameters`. The full JSON body would be like:\n \n\n```\n    {\"parameters\": [20, 200] }\n```"
        type: object
    required:
    - parameters
  Yourawesomemodelresponse:
    title: Your awesome model response
    type: object
    properties:
      release:
        $ref: '#/definitions/Release'
      requestId:
        type: string
      result:
        $ref: '#/definitions/Result'
  Release:
    title: Release
    type: object
    properties:
      commitId:
        description: the commit your API endpoint is bound to
        type: string
      file:
        description: the file your API endpoint is bound to
        type: string
      function:
        description: the function your API endpoint is bound to
        type: string
      version:
        description: the version of your API that was used
        type: number
        format: double
  Result:
    title: Result
    type: object
    properties:
      a_random_number:
        type: number
        format: double
  ListofRunsresponse:
    title: List of Runs response
    type: object
    properties:
      objectType:
        type: string
      uri:
        type: string
      data:
        description: Array of run statuses
        type: object
  StartRunrequest:
    title: Start Run request
    type: object
    properties:
      command:
        description: 'Array of strings making up your command. For example: `["model.py","dataset","--sample","2000"]`'
        type: object
      isDirect:
        description: a direct command is interpretted as a shell command; Domino doesn't try to infer a program to match your file type
        type: boolean
      title:
        description: an optional title for your run
        type: string
      tier:
        description: name of the hardware tier to use
        type: string
      commitId:
        description: revision at which to start the run
        type: string
      publishApiEndpoint:
        description: If true, the results of a successful run will be deployed to the project's active API Endpoint, if one exists
        type: boolean
    required:
    - command
    - isDirect
  StartRunresponse:
    title: Start Run response
    type: object
    properties:
      runId:
        description: The unique ID for the run that was just started
        type: string
      message:
        description: A human-readable message with a full link to view the status of your run
        type: string
  RunStatusresponse:
    title: Run Status response
    type: object
    properties:
      id:
        description: The unique ID for the run
        type: string
      projectId:
        description: the ID of the project
        type: string
      number:
        description: the auto-increment number associated with the run
        type: number
        format: double
      startingUserId:
        description: the ID of the user who started the run
        type: string
      queued:
        description: milliseconds epoch time the run was added to the queue
        type: number
        format: double
      started:
        description: milliseconds epoch time the run started executing
        type: number
        format: double
      completed:
        description: milliseconds epoch time the run completed running
        type: number
        format: double
      status:
        description: the status of the run
        type: string
      commitId:
        description: the commit hash of the project used to create the run
        type: string
      executor:
        type: string
      outputCommitId:
        description: the commit hash of the project post-run (look at files with this hash for the results)
        type: string
      title:
        description: title of the run, if it was renamed
        type: string
      isArchived:
        description: boolean denoting if the run was archived (hidden from the web interface)
        type: boolean
      postProcessedTimestamp:
        description: milliseconds epoch time the run finished processing (this happens after the run has completed and includes saving the results back to the main project repo)
        type: number
        format: double
      diagnoisticStatistics:
        $ref: '#/definitions/DiagnoisticStatistics'
      isCompleted:
        type: boolean
  DiagnoisticStatistics:
    title: DiagnoisticStatistics
    type: object
    properties:
      isError:
        type: boolean
      data:
        type: object
